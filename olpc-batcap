#!/bin/bash
# Factory IQC script to measure battery capacity

# Error if we try to use an undefined variable
# set -u


# These are used by the logfile header
PRGNAME="olpc-batcap"
VERSION="0.1.3"

echo -n "$PRGNAME Ver: $VERSION starting at "
echo `date`

if [ -e ./olpc-pwr-common ]; then
	source "./olpc-pwr-common"
elif [ -e /usr/share/olpc-utils/olpc-pwr-common ]; then
	source /usr/share/olpc-utils/olpc-pwr-common
else
	echo "Can't find 'olpc-pwr-common'"
	exit 1
fi

# Make sure that if we exit via ctrl-C that
# charging gets turned back on.
function cleanup
{
	enable_charging
	exit
}

trap cleanup SIGINT

# Disable powerd daemon.  Needs to be done early before
# checking for a battery.  Otherwise powerd can put you
# to sleep while waiting for a battery.

POWERD_STATUS=` status powerd | awk '{print $2}' `
echo "Powerd status : $POWERD_STATUS"
if [[ "$POWERD_STATUS" != "stop/waiting" ]]; then
    echo "Disable power daemon"
    sudo stop powerd
fi

pwrlog_module_init

echo "Waiting for a battery"
wait_for_battery
echo "Reading battery info"
pwrlog_battery_init

BATTERY_FULL_FLAG_DOWN=92
BATTERY_LOW_VOL=5100000

echo
echo "PRECHARGE"
echo

# Make sure we aren't in discharge mode
enable_charging
# Allow the status to update
sleep 1

# when battery status is full, stop charging.
# so capacity can be 93~100 when status is full
# prevent this case, discharge to below 93

get_sta BATTERY_STATUS
if  [[ "${BATTERY_STATUS}" == "Discharging" ]]; then
   echo "Battery status: $BATTERY_STATUS"
   echo "***Please plug AC input or try to replug AC adapter"

   while [[ "${BATTERY_STATUS}" == "Discharging" ]]
   do
	sleep 1
	get_sta BATTERY_STATUS
   done
fi

echo "Topping off the battery"

# With EC code > 0.4.02 enterning into runin discharge mode
# will clear the battery full flag.
disable_charging
sleep 2
enable_charging

while true
do
    get_soc BATTERY_SOC
    get_sta BATTERY_STATUS
    get_cur BATTERY_CUR
    get_vol BATTERY_VOL
    VOLT_100s=$(( ${BATTERY_VOL}/10000 ))
    VOLT_STR=$(format_hundreds_as_n.nn $VOLT_100s)

    echo "Precharge: SOC: ${BATTERY_SOC} : Current: $(( ${BATTERY_CUR}/1000 )) mA : Voltage: ${VOLT_STR} V "

    if [[ ${BATTERY_STATUS} == "Full" ]]; then
	echo "Battery status: ${BATTERY_STATUS}"
	break
    fi
    sleep 5
done

# Accuracy of the sensor is +/- 2 degC.  I'd like to have this number lower but I found 
# testing at the OLPC office that many of the batterys can sit for very long periods
# waiting for the temp to decrease. (Office temp 25-30 deg C)
# TODO: Change this to and adaptive scheme. So it will work regardless of the ambient
# temp

COOLING_TEMP=3080

echo "Waiting for battery to cool below $(format_hundreds_as_n.nn $COOLING_TEMP) C"
get_temp BATTERY_TEMP
echo "Start temp: $(format_hundreds_as_n.nn $BATTERY_TEMP) C"
START_TIME=$(get_seconds)
while true
do
    get_temp BATTERY_TEMP
    # Only show the updated on the screen not in the logs
    printf "Temperature: $(format_hundreds_as_n.nn $BATTERY_TEMP) C seconds: $(( $(get_seconds) - $START_TIME )) \r" >&2
    if [[ ${BATTERY_TEMP} -lt ${COOLING_TEMP} ]] ; then
	echo
        echo "Battery cooled to $(format_hundreds_as_n.nn $BATTERY_TEMP) C"
        break
    fi
    sleep 1
done
echo "Cooling took $(( $(get_seconds) - $START_TIME )) seconds"

echo
echo "DISCHARGE"
echo

FDATE=`date "+%y%m%d-%H%M%S"`
HOST=`hostname -s`
LOGFILE="dis-$DS_SERNUM-$FDATE.csv"
pwrlog_write_header

set_backlight_full

# Set the discharge current by running a few other tasks.
# The current draw can be changed by changing the master volume
# level.  83% works out to ~850mA and 70% is ~700mA.

amixer set Speaker 100% unmute /dev/null
amixer set Master 83% unmute > /dev/null
gst-launch audiotestsrc volume=1 freq=100 ! audioconvert ! alsasink > /dev/null 2>&1 &
AUDIO_PID=$!
# Give audio maximum prioity so it does not skip.
sudo chrt -p 99 $AUDIO_PID

sh /runin/runin-camera > /dev/null 2>&1 &
CAMERA_PID=$!

init_readings
take_reading
log_reading

disable_charging

while true
do
    take_reading
    log_reading
    VOLT_100s=$(( ${VOLT}/10000 ))
    VOLT_STR=$(format_hundreds_as_n.nn $VOLT_100s)
    get_cur BATTERY_CUR
    printf "Discharge: SOC: %d %%, Consumption : %d mAh, Voltage : %s V, Current %d mA\n"  $CAPLEVEL $MAh_NET $VOLT_STR $(( ${BATTERY_CUR}/1000 ))

    if [[ ( $VOLT -le ${BATTERY_LOW_VOL} ) ]]; then
       echo "Low voltage threshold reached. Test Complete."
       break
    fi

    if [[ (${VOLT} -le 5400000) && (${VOLT} -ge 5200000) ]]; then
        sleep 5
    elif [[ ( ${VOLT} -le 5200000 ) ]]; then
	sleep 1
    else
        sleep 20
    fi
done

FDATE=`date "+%y%m%d-%H%M%S"`
LOGFILE="chg-$DS_SERNUM-$FDATE.csv"
pwrlog_write_header
init_readings
take_reading
log_reading

echo
echo "CHARGE"
echo

# echo "enable charge"
enable_charging

# No point in using lots of extra power while charging
# Stop the loading apps.
kill $CAMERA_PID > /dev/null
kill $AUDIO_PID > /dev/null
killall gst-launch-0.10 > /dev/null

while true
do
    take_reading
    log_reading
    VOLT_100s=$(( ${VOLT}/10000 ))
    VOLT_INT=$(( ${VOLT_100s}/100 ))
    VOLT_FRAC=$(( ${VOLT_100s} - ( ${VOLT_INT}*100 ) ))
    get_cur BATTERY_CUR
    printf "SOC: %d %%, Net mAh: %d , Voltage : %d.%02d V, Current %d mA\n"  $CAPLEVEL $MAh_NET $VOLT_INT $VOLT_FRAC $(( ${BATTERY_CUR}/1000 ))

    if [[ ${STAT} == "Full" ]]; then
        echo "Charge complete. Exiting"
        break
    fi

    sleep 20
done

echo -n "$PRGNAME ending at "
echo `date`
