#!/bin/bash
# Factory IQC script to measure battery capacity

# Error if we try to use an undefined variable
set -u

# The duty cycle for the web fetch portion of the test
# its in percent.  This controls how much of the
# loop time is spend fetching data rather than
# suspending.

WEB_DUTY_CYCLE=50

# The host used to fetch the data from and do a ping check to see
# if we really are on-line.
NET_HOSTNAME="dev.laptop.org"

# Total loop time of the fetch/suspend loop
# in seconds.

LOOP_BASE=120
QUICK_RUN_TIME=720

# These are used by the logfile header
PRGNAME="olpc-batlife"
VERSION="0.1.7"

echo -n "$PRGNAME Ver: $VERSION starting at "
echo `date`

if [ -e ./olpc-pwr-common ]; then
	source "./olpc-pwr-common"
elif [ -e /usr/share/olpc-utils/olpc-pwr-common ]; then
	source /usr/share/olpc-utils/olpc-pwr-common
else
	echo "Can't find 'olpc-pwr-common'"
	exit 1
fi

if [ -e ./runin-common ]; then
	source "./runin-common"
elif [ -e /runin/runin-common ]; then
	source /runin/runin-common
else
	echo "Can't find 'runin-common'"
	exit 1
fi

SKIP_VIDEO_TEST="false"
SKIP_NETWORK_TEST="false"
SKIP_BASELINE_TEST="false"
SKIP_CLOCK_TEST="false"
SKIP_ETOYS_TEST="false"
QUICK_TEST="false"

until [ -z "${1:-}" ]
do
	if [ ${1:-0} = "skipvideo" ]; then
		SKIP_VIDEO_TEST="true"
	fi

	if [ ${1:-0} = "skipnet" ]; then
		SKIP_NETWORK_TEST="true"
	fi

	if [ ${1:-0} = "skipbase" ]; then
		SKIP_BASELINE_TEST="true"
	fi

	if [ ${1:-0} = "skipclock" ]; then
		SKIP_CLOCK_TEST="true"
	fi

	if [ ${1:-0} = "skipetoys" ]; then
		SKIP_ETOYS_TEST="true"
	fi

	if [ ${1:-0} = "quick" ]; then
		QUICK_TEST="true"
	fi

	if [ ${1:-0} = "netonly" ]; then
		SKIP_VIDEO_TEST="true"
		SKIP_BASELINE_TEST="true"
		SKIP_ETOYS_TEST="true"
	fi

	shift
done

# We use this for powerd realated flags.
MY_PID=$$

function get_timestamp
{
    echo `date +%s`
}

# Make sure that if we exit via ctrl-C that
# charging gets turned back on.
function cleanup
{
	enable_charging
	exit
}
trap cleanup SIGINT

online_check()
{
	for l in {1..4}; do
		$(nm-online -t 10 -q)
		if [ $? -eq 0 ]; then
			# Interface seems present and up. But are we really online?
			sudo ping -c 1 $NET_HOSTNAME &> /dev/null
			if [ $? -eq 0 ]; then
				echo 0
				return
			fi
		fi
	done
	echo 1
}

wait_for_online()
{
    local lc=0
    local bfh=0
    while true; do
	if [ $(online_check) -eq 0 ]; then
		break
	else
		printf "$(get_timestamp) : Run Loop: $1 : Count: $lc : Network is Offline               \n" >&2
		sudo sh -c  "echo batlife: $(get_timestamp) : Run Loop: $1 : Count: $lc : Network is Offline > /dev/kmsg"
	fi
	lc=$(( $lc+1 ))

	if [ $lc -gt 5 ]; then
		printf "\n$(get_timestamp) : Run Loop: $1 : Network seems permanently offline Applying BFH\n" >&2
		sudo sh -c "echo batlife: $(get_timestamp) : Run Loop $1 : Network seems permanently offline. Applying BFH > /dev/kmsg"
		sudo rtcwake --seconds 10 --mode mem > /dev/null 2>/dev/null
		lc=0
		bfh=$(( $bfh+1 ))
	fi

	if [ $bfh -gt 5 ]; then
		printf "$(get_timestamp) : Run Loop $1 : BFH seems to have failed\n" >&2
		sudo sh -c "echo batlife: $(get_timestamp) : Run Loop $1 : BFH seems to have failed > /dev/kmsg"
		exit 1
	fi
    done
}

function video_test()
{

	TEST_TIME=${1:-1800}
	echo "Starting camera/video test"
	sh /runin/runin-camera > /dev/null 2>&1 &
	CAMERA_PID=$!
	TSTART=$(get_timestamp)

	take_reading
	log_reading

	while true
	do
	    sleep 60
	    take_reading
	    log_reading
	    VOLT_100s=$(( ${VOLT}/10000 ))
	    VOLT_STR=$(format_hundreds_as_n.nn $VOLT_100s)
	    WATTS_100s=$(( $W_SAMPLE/10 ))
	    WATTS_STR=$(format_hundreds_as_n.nn $WATTS_100s)
	    printf "SOC: %d %%, Runtime: %d minutes, Net mAh: %d , Watts: %s W\n"  $CAPLEVEL $NET_MINUTES $MAh_NET $WATTS_STR
	    if [ $(diff_time $TSTART) -gt ${TEST_TIME} ]; then
		break
	    fi
	done

# This does not work as gts-launch-0.10 stays running.
# TODO: Tweak runin-camera so that it kills the gst-launch instances when it exits.
	kill $CAMERA_PID
# Take out all gst-launch programs (the regex match should deal with a version number change)
# We have to do this twice because runin-camera can actually run 2 instances of gst-launch.
# The 1st one uses xvimagesink and then the fallback just uses ximagesink.  So if the 1st attempt
# works then we still have 1 more to deal with after we kill it.
	killall -r 'gst-launch*'
	sleep 2
	killall -r 'gst-launch*' > /dev/null
}

# This will snap a battery reading and then updated the screen with status
# you must have initialized the pwr log system first.
function do_reading_with_stat()
{
    take_reading
    log_reading
    VOLT_100s=$(( ${VOLT}/10000 ))
    VOLT_INT=$(( ${VOLT_100s}/100 ))
    VOLT_FRAC=$(( ${VOLT_100s} - ( ${VOLT_INT}*100 ) ))
    WATTS_100s=$(( $W_SAMPLE/10 ))
    WATTS_STR=$(format_hundreds_as_n.nn $WATTS_100s)
    printf "SOC: %d %%, Runtime: %d minutes, Net mAh: %d , Watts: %s W\n"  $CAPLEVEL $NET_MINUTES $MAh_NET $WATTS_STR
}

function baseline_test()
{
	TEST_TIME=${1:-1800}
	echo "Starting Baseline test of $TEST_TIME seconds"
	TSTART=$(get_timestamp)

	take_reading
	log_reading

	while true
	do
	    sleep 60
	    do_reading_with_stat
	    if [ $(diff_time $TSTART) -gt ${TEST_TIME} ]; then
		break
	    fi
	done
}

function clock_test()
{
	echo "Starting Clock activity test"
	TEST_TIME=${1:-1800}
	TSTART=$(get_timestamp)

	take_reading
	log_reading

	sugar-launch tv.alterna.Clock &> /dev/null &
	while true
	do
	    sleep 60
	    do_reading_with_stat
	    if [ $(diff_time $TSTART) -gt ${TEST_TIME} ]; then
		break
	    fi
	done
	# Stop time.
	kill `ps x -F | grep "[C]lockActivity" | tr -s ' ' | cut -d' ' -f2`
}

function etoys_test()
{
	echo "Starting Etoys activity test"
	TEST_TIME=${1:-1800}
	TSTART=$(get_timestamp)

	take_reading
	log_reading

	sugar-launch org.vpri.EtoysActivity &> /dev/null &
	while true
	do
	    sleep 60
	    do_reading_with_stat
	    if [ $(diff_time $TSTART) -gt ${TEST_TIME} ]; then
		break
	    fi
	done
	# Stop time.
	kill `ps x -F | grep "[o]rg.vpri.EtoysActivity" | tr -s ' ' | cut -d' ' -f2`
}


function net_test()
{

	DOWNLOAD_SECONDS=$(( (${LOOP_BASE}*${WEB_DUTY_CYCLE}*100)/10000 ))
	SUSPEND_SECONDS=$(( ${LOOP_BASE}-${DOWNLOAD_SECONDS} ))

	echo "Fetching for ${DOWNLOAD_SECONDS} seconds suspending for ${SUSPEND_SECONDS} seconds"

	take_reading
	log_reading

	rl=0
	while true
	do
	    TSTART=$(get_timestamp)
	    i=0
	    PREV_ERROR=0
	    while [ $(diff_time ${TSTART}) -lt ${DOWNLOAD_SECONDS} ]
	    do

		wait_for_online $rl

		ERROR=0
		DL_SPEED=$(curl -w "%{speed_download}" -Ss -m 10 http://${NET_HOSTNAME}/~rsmith/batlife.dat -o /dev/null)
		CURL_RET=$?

		if [ $PREV_ERROR -ne $CURL_RET ]; then
			echo
			sudo sh -c "echo batlife: $(get_timestamp) : Run Loop: $rl : Curl error: $CURL_RET > /dev/kmsg"
		fi
		case ${CURL_RET} in
			# Don't output anthing on a good fetch
			0 )
				ERROR=0
				;;
			6 )
				printf "$(get_timestamp) : Run Loop: $rl : Count: $i : DNS resolve error.         \n" >&2
				ERROR=1
				;;
			* )
				printf "$(get_timestamp) : Run Loop: $rl : Count: $i : Curl error: $CURL_RET      \n" >&2
				ERROR=1
				;;
		esac
		PREV_ERROR=$CURL_RET
		i=$(( $i+1 ))
	    done

	    do_reading_with_stat

#	    if [ $ERROR -eq 1 ]; then
#		echo
#	    fi

	    TSTART=$(get_timestamp)
	    i=0
	    while [ $(diff_time ${TSTART}) -lt ${SUSPEND_SECONDS} ]
	    do
		TELAPSED=$(diff_time ${TSTART})
		TSUS=$(( ${SUSPEND_SECONDS} - ${TELAPSED} ))
		if [ ${TSUS} -lt 0 ]; then
			TSUS=0
		fi
		wait_for_online $rl

		sudo sh -c "echo batlife: $(get_timestamp) : Run loop: $rl : Sus loop: $i > /dev/kmesg"
		# We have to set a wakeup source or the wlan will lose power in suspend
		shopt -s nullglob
		ETH_MSG=$(sudo ethtool -s eth0 wol u 2>&1)
		if [ "$ETH_MSG" ]; then
			echo "ethtool err: $ETH_MSG                                                       \n"
		fi
		sudo rtcwake --seconds ${TSUS} --mode mem > /dev/null 2>/dev/null
		i=$(( $i+1 ))
	    done
	    do_reading_with_stat
	    rl=$(( $rl+1 ))
	done
}

# Tell powerd not to suspend since this script will manage that and
# prevent it from dimming the backlight

touch /var/run/powerd-inhibit-suspend/$MY_PID
if [ -e /var/run/powerd-inhibit-dim ]; then
	touch /var/run/powerd-inhibit-dim/$MY_PID
fi

pwrlog_module_init

echo "Waiting for a battery"
wait_for_battery
echo "Reading battery info"
pwrlog_battery_init

get_extpwr EXTPWR_STATUS
if  [[ "${EXTPWR_STATUS}" == "1" ]]; then
   echo "Disconnect external power to start the test"

   while [[ "${EXTPWR_STATUS}" == "1" ]]
   do
        sleep 1
        get_extpwr EXTPWR_STATUS
   done
fi


FDATE=`date "+%y%m%d-%H%M%S"`
HOST=`hostname -s`
LOGFILE="blife-$FDATE-$DS_SERNUM.csv"
SYSSTAT_FILE="sar-$FDATE-$DS_SERNUM.bin"
SYSSTAT_PID=0

if [ -e /usr/lib/sa/sadc ]; then
	sudo /usr/lib/sa/sadc 30 $SYSSTAT_FILE &
	SYSSTAT_PID=$!
fi

pwrlog_write_header
init_readings

# Start with a short baseline test
if [ $SKIP_BASELINE_TEST != "true" ]; then
	# Skip first baseline on a quick test
	if [ $QUICK_TEST != "true" ]; then
		baseline_test 900
	fi
fi

# Now do a camera/video for high power test.
if [ $SKIP_VIDEO_TEST != "true" ]; then
	if [ $QUICK_TEST = "true" ]; then
		video_test $QUICK_RUN_TIME
	else
		video_test
	fi
fi


# Etoys. Medium power. (some graphics, some cpu)
# Etoys runs the car project by default when you load
if [ $SKIP_ETOYS_TEST != "true" ]; then
	if [ $QUICK_TEST = "true" ]; then
		etoys_test $QUICK_RUN_TIME
	else
		etoys_test
	fi

fi

# Then clock test.
# The clock test turns out not be that much more than
# baseline idle (on XO4) so skip it for now.
#if [ $SKIP_CLOCK_TEST != "true" ]; then
#	if [ $QUICK_TEST = "true" ]; then
#		clock_test 600
#	else
#		clock_test
#	fi
#fi

# Then a baseline idle test
if [ $SKIP_BASELINE_TEST != "true" ]; then
	if [ $QUICK_TEST = "true" ]; then
		baseline_test $QUICK_RUN_TIME
	else
		baseline_test
	fi
fi

# Next we do a loop of fetching a 1MiB file from dev.laptop.org and then a suspend
# until powerd shuts us down.

if [ $SKIP_NETWORK_TEST != "true" ]; then
	if [ $QUICK_TEST != "true" ]; then
		net_test
	fi
fi

if [ $SYSSTAT_PID -gt 0 ]; then
	sudo kill $SYSSTAT_PID
fi

echo -n "$PRGNAME ending at "
echo `date`

exit
