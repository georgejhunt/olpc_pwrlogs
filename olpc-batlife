#!/bin/bash
# Factory IQC script to measure battery capacity

# Error if we try to use an undefined variable
set -u

# The duty cycle for the web fetch portion of the test
# its in percent.  The loop time is 1 minute so a value of 50
# means that we will fetch the file for 30 seconds and then
# suspend for 30.

WEB_DUTY_CYCLE=50

# These are used by the logfile header
PRGNAME="olpc-batlife"
VERSION="0.1.0"

echo -n "$PRGNAME Ver: $VERSION starting at "
echo `date`

if [ -e ./olpc-pwr-common ]; then
	source "./olpc-pwr-common"
elif [ -e /usr/share/olpc-utils/olpc-pwr-common ]; then
	source /usr/share/olpc-utils/olpc-pwr-common
else
	echo "Can't find 'olpc-pwr-common'"
	exit 1
fi

if [ -e ./runin-common ]; then
	source "./runin-common"
elif [ -e /runin/runin-common ]; then
	source /runin/runin-common
else
	echo "Can't find 'runin-common'"
	exit 1
fi

SKIP_VIDEO_TEST="false"
if [ ${1-0} = "skipvideo" ]; then
	SKIP_VIDEO_TEST="true"
fi

# We use this for powerd realated flags.
MY_PID=$$

# Make sure that if we exit via ctrl-C that
# charging gets turned back on.
function cleanup
{
	enable_charging
	exit
}
trap cleanup SIGINT

function video_test()
{
	sh /runin/runin-camera > /dev/null 2>&1 &
	CAMERA_PID=$!
	TSTART=$(get_timestamp)

	take_reading
	log_reading

	while true
	do
	    take_reading
	    log_reading
	    VOLT_100s=$(( ${VOLT}/10000 ))
	    VOLT_STR=$(format_hundreds_as_n.nn $VOLT_100s)
	    WATTS_100s=$(( $W_SAMPLE/10 ))
	    WATTS_STR=$(format_hundreds_as_n.nn $WATTS_100s)
	    printf "SOC: %d %%, Runtime: %d minutes, Net mAh: %d , Watts: %s W\n"  $CAPLEVEL $NET_MINUTES $MAh_NET $WATTS_STR
	    sleep 60
	    if [ $(diff_time $TSTART) -gt 3600 ]; then
		break
	    fi
	done

# This does not work as gts-launch-0.10 stays running.
# TODO: Tweak runin-camera so that it kills the gst-launch instances when it exits.
	kill $CAMERA_PID
# Take out all gst-launch programs (the regex match should deal with a version number change)
# We have to do this twice because runin-camera can actually run 2 instances of gst-launch.
# The 1st one uses xvimagesink and then the fallback just uses ximagesink.  So if the 1st attempt
# works then we still have 1 more to deal with after we kill it.
	killall -r 'gst-launch*'
	sleep 2
	killall -r 'gst-launch*' > /dev/null
}

# This will snap a battery reading and then updated the screen with status
# you must have initialized the pwr log system first.
function do_reading_with_stat()
{
    take_reading
    log_reading
    VOLT_100s=$(( ${VOLT}/10000 ))
    VOLT_INT=$(( ${VOLT_100s}/100 ))
    VOLT_FRAC=$(( ${VOLT_100s} - ( ${VOLT_INT}*100 ) ))
    WATTS_100s=$(( $W_SAMPLE/10 ))
    WATTS_STR=$(format_hundreds_as_n.nn $WATTS_100s)
    printf "SOC: %d %%, Runtime: %d minutes, Net mAh: %d , Watts: %s W\n"  $CAPLEVEL $NET_MINUTES $MAh_NET $WATTS_STR
}

pwrlog_module_init

echo "Waiting for a battery"
wait_for_battery
echo "Reading battery info"
pwrlog_battery_init

get_extpwr EXTPWR_STATUS
if  [[ "${EXTPWR_STATUS}" == "1" ]]; then
   echo "Disconnect external power to start the test"

   while [[ "${EXTPWR_STATUS}" == "1" ]]
   do
        sleep 1
        get_extpwr EXTPWR_STATUS
   done
fi

# Tell powerd not to suspend since this script will maange that and
# prevent it from dimming the backlight

touch /var/run/powerd-inhibit-suspend/$MY_PID
if [ -e /var/run/powerd-inhibit-dim ]; then
	touch /var/run/powerd-inhibit-dim/$MY_PID
fi

FDATE=`date "+%y%m%d-%H%M%S"`
HOST=`hostname -s`
LOGFILE="blife-$DS_SERNUM-$FDATE.csv"
pwrlog_write_header
init_readings

# First we do 1 hour of camera/video for a high power metric.

if [ $SKIP_VIDEO_TEST != "true" ]; then
	video_test
fi

# Next we do a loop of fetching a 1MiB file from dev.laptop.org and then a suspend
# until powerd shuts us down.

INTFACE_DELAY=1
LOOP_BASE=120
DOWNLOAD_SECONDS=$(( (${LOOP_BASE}*${WEB_DUTY_CYCLE}*100)/10000 ))
SUSPEND_SECONDS=$(( ${LOOP_BASE}-${DOWNLOAD_SECONDS} ))

echo "Fetching for ${DOWNLOAD_SECONDS} seconds suspending for ${SUSPEND_SECONDS} seconds"
take_reading
log_reading
 
while true
do
    TSTART=$(get_timestamp)
    i=0
    while [ $(diff_time ${TSTART}) -lt ${DOWNLOAD_SECONDS} ]
    do
	DL_SPEED=`curl -w "%{speed_download}" -Ss -m 10 http://dev.laptop.org/~rsmith/batlife.dat -o /dev/null`
	CURL_RET=$?
	if [ $? -eq 0 ]; then
		printf "Fetch count: $i Speed: $DL_SPEED \r" >&2
	else
		printf "\nCurl error: $CURL_RET count $i                 \r" >&2
	fi
	i=$(( $i+1 ))
    done
    echo
    do_reading_with_stat

    TSTART=$(get_timestamp)
    i=0
    while [ $(diff_time ${TSTART}) -lt ${SUSPEND_SECONDS} ]
    do
	printf "Sus loop: $i   \r" >&2
	# We have to set a wakeup source or the wlan will lose power in suspend
	sudo ethtool -s eth0 wol u
	sudo rtcwake --seconds 10 --mode mem > /dev/null 2>/dev/null
	i=$(( $i+1 ))
	# It takes some time for the interface to show back up after a resume
	sleep $INTFACE_DELAY
    done
    echo
    do_reading_with_stat
done

echo -n "$PRGNAME ending at "
echo `date`
